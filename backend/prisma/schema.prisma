// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId           BigInt            @id @default(autoincrement()) @map("user_id")
  username         String            @unique @db.VarChar(50)
  email            String            @unique @db.VarChar(255)
  passwordHash     String            @map("password_hash") @db.VarChar(255)
  profileImageUrl  String?           @map("profile_image_url") @db.VarChar(500)
  bio              String?           @db.Text
  height           Decimal?          @db.Decimal(5, 2)
  weight           Decimal?          @db.Decimal(5, 2)
  birthDate        DateTime?         @map("birth_date") @db.Date
  gender           String?           @db.VarChar(10)
  userTier         String            @default("브론즈") @map("user_tier") @db.VarChar(20)
  totalPoints      Int               @default(0) @map("total_points")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")

  workouts         Workout[]
  workoutPrograms  UserWorkoutProgram[]
  goals            Goal[]
  achievements     UserAchievement[]
  followersRelation UserFollow[]      @relation("Followers")
  followingRelation UserFollow[]      @relation("Following")
  socialPosts      SocialPost[]
  postLikes        PostLike[]
  postComments     PostComment[]
  challengeParticipants ChallengeParticipant[]
  notifications    Notification[]
  progressPhotos   ProgressPhoto[]
  bodyMeasurements BodyMeasurement[]
  dietLogs         DietLog[]

  @@map("users")
}

model Exercise {
  exerciseId       BigInt            @id @default(autoincrement()) @map("exercise_id")
  exerciseName     String            @map("exercise_name") @db.VarChar(100)
  category         String            @db.VarChar(50)
  muscleGroup      String            @map("muscle_group") @db.VarChar(100)
  equipment        String?           @db.VarChar(100)
  difficulty       String            @db.VarChar(20)
  instructions     String?           @db.Text
  videoUrl         String?           @map("video_url") @db.VarChar(500)
  imageUrl         String?           @map("image_url") @db.VarChar(500)
  caloriesPerMinute Decimal?         @map("calories_per_minute") @db.Decimal(5, 2)
  createdAt        DateTime          @default(now()) @map("created_at")

  workoutExercises WorkoutExercise[]
  programExercises WorkoutProgramExercise[]

  @@map("exercises")
}

model Workout {
  workoutId        BigInt            @id @default(autoincrement()) @map("workout_id")
  userId           BigInt            @map("user_id")
  workoutDate      DateTime          @map("workout_date")
  startTime        DateTime          @map("start_time")
  endTime          DateTime?         @map("end_time")
  totalDuration    Int?              @map("total_duration")
  totalCalories    Int?              @map("total_calories")
  workoutRating    Int?              @map("workout_rating")
  notes            String?           @db.Text
  createdAt        DateTime          @default(now()) @map("created_at")

  user             User              @relation(fields: [userId], references: [userId])
  workoutExercises WorkoutExercise[]

  @@index([userId, workoutDate])
  @@map("workouts")
}

model WorkoutExercise {
  workoutExerciseId BigInt           @id @default(autoincrement()) @map("workout_exercise_id")
  workoutId         BigInt           @map("workout_id")
  exerciseId        BigInt           @map("exercise_id")
  orderInWorkout    Int              @map("order_in_workout")
  targetSets        Int?             @map("target_sets")
  targetReps        Int?             @map("target_reps")
  targetWeight      Decimal?         @map("target_weight") @db.Decimal(6, 2)
  targetDuration    Int?             @map("target_duration")
  actualSets        Int?             @map("actual_sets")
  notes             String?          @db.Text
  createdAt         DateTime         @default(now()) @map("created_at")

  workout           Workout          @relation(fields: [workoutId], references: [workoutId])
  exercise          Exercise         @relation(fields: [exerciseId], references: [exerciseId])
  exerciseSets      ExerciseSet[]

  @@map("workout_exercises")
}

model ExerciseSet {
  setId             BigInt           @id @default(autoincrement()) @map("set_id")
  workoutExerciseId BigInt           @map("workout_exercise_id")
  setNumber         Int              @map("set_number")
  reps              Int?
  weight            Decimal?         @db.Decimal(6, 2)
  duration          Int?
  distance          Decimal?         @db.Decimal(8, 2)
  restTime          Int?             @map("rest_time")
  isWarmup          Boolean          @default(false) @map("is_warmup")
  createdAt         DateTime         @default(now()) @map("created_at")

  workoutExercise   WorkoutExercise  @relation(fields: [workoutExerciseId], references: [workoutExerciseId])

  @@map("exercise_sets")
}

model WorkoutProgram {
  programId         BigInt           @id @default(autoincrement()) @map("program_id")
  programName       String           @map("program_name") @db.VarChar(100)
  description       String?          @db.Text
  difficulty        String           @db.VarChar(20)
  durationWeeks     Int              @map("duration_weeks")
  workoutsPerWeek   Int              @map("workouts_per_week")
  category          String           @db.VarChar(50)
  createdBy         String           @map("created_by") @db.VarChar(50)
  imageUrl          String?          @map("image_url") @db.VarChar(500)
  isPremium         Boolean          @default(false) @map("is_premium")
  createdAt         DateTime         @default(now()) @map("created_at")

  userPrograms      UserWorkoutProgram[]
  programExercises  WorkoutProgramExercise[]

  @@map("workout_programs")
}

model UserWorkoutProgram {
  userProgramId     BigInt           @id @default(autoincrement()) @map("user_program_id")
  userId            BigInt           @map("user_id")
  programId         BigInt           @map("program_id")
  startDate         DateTime         @map("start_date") @db.Date
  endDate           DateTime?        @map("end_date") @db.Date
  completionRate    Decimal?         @map("completion_rate") @db.Decimal(5, 2)
  isActive          Boolean          @default(true) @map("is_active")
  createdAt         DateTime         @default(now()) @map("created_at")

  user              User             @relation(fields: [userId], references: [userId])
  workoutProgram    WorkoutProgram   @relation(fields: [programId], references: [programId])

  @@map("user_workout_programs")
}

model WorkoutProgramExercise {
  programExerciseId BigInt           @id @default(autoincrement()) @map("program_exercise_id")
  programId         BigInt           @map("program_id")
  exerciseId        BigInt           @map("exercise_id")
  dayOfWeek         Int              @map("day_of_week")
  weekNumber        Int              @map("week_number")
  orderInDay        Int              @map("order_in_day")
  sets              Int
  reps              String           @db.VarChar(50)
  restTime          Int?             @map("rest_time")
  notes             String?          @db.Text

  workoutProgram    WorkoutProgram   @relation(fields: [programId], references: [programId])
  exercise          Exercise         @relation(fields: [exerciseId], references: [exerciseId])

  @@map("workout_program_exercises")
}

model Goal {
  goalId            BigInt           @id @default(autoincrement()) @map("goal_id")
  userId            BigInt           @map("user_id")
  goalType          String           @map("goal_type") @db.VarChar(50)
  targetValue       Decimal          @map("target_value") @db.Decimal(10, 2)
  currentValue      Decimal          @default(0) @map("current_value") @db.Decimal(10, 2)
  targetDate        DateTime         @map("target_date") @db.Date
  isAchieved        Boolean          @default(false) @map("is_achieved")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")

  user              User             @relation(fields: [userId], references: [userId])

  @@map("goals")
}

model Achievement {
  achievementId     BigInt           @id @default(autoincrement()) @map("achievement_id")
  achievementName   String           @map("achievement_name") @db.VarChar(100)
  description       String           @db.Text
  category          String           @db.VarChar(50)
  requiredValue     Int              @map("required_value")
  points            Int
  badgeImageUrl     String?          @map("badge_image_url") @db.VarChar(500)
  createdAt         DateTime         @default(now()) @map("created_at")

  userAchievements  UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  userAchievementId BigInt           @id @default(autoincrement()) @map("user_achievement_id")
  userId            BigInt           @map("user_id")
  achievementId     BigInt           @map("achievement_id")
  achievedAt        DateTime         @default(now()) @map("achieved_at")

  user              User             @relation(fields: [userId], references: [userId])
  achievement       Achievement      @relation(fields: [achievementId], references: [achievementId])

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model UserFollow {
  followId          BigInt           @id @default(autoincrement()) @map("follow_id")
  followerId        BigInt           @map("follower_id")
  followingId       BigInt           @map("following_id")
  createdAt         DateTime         @default(now()) @map("created_at")

  follower          User             @relation("Followers", fields: [followerId], references: [userId])
  following         User             @relation("Following", fields: [followingId], references: [userId])

  @@unique([followerId, followingId])
  @@map("user_follows")
}

model SocialPost {
  postId            BigInt           @id @default(autoincrement()) @map("post_id")
  userId            BigInt           @map("user_id")
  content           String           @db.Text
  imageUrl          String?          @map("image_url") @db.VarChar(500)
  workoutId         BigInt?          @map("workout_id")
  likesCount        Int              @default(0) @map("likes_count")
  commentsCount     Int              @default(0) @map("comments_count")
  createdAt         DateTime         @default(now()) @map("created_at")
  updatedAt         DateTime         @updatedAt @map("updated_at")

  user              User             @relation(fields: [userId], references: [userId])
  postLikes         PostLike[]
  postComments      PostComment[]

  @@map("social_posts")
}

model PostLike {
  likeId            BigInt           @id @default(autoincrement()) @map("like_id")
  postId            BigInt           @map("post_id")
  userId            BigInt           @map("user_id")
  createdAt         DateTime         @default(now()) @map("created_at")

  socialPost        SocialPost       @relation(fields: [postId], references: [postId])
  user              User             @relation(fields: [userId], references: [userId])

  @@unique([postId, userId])
  @@map("post_likes")
}

model PostComment {
  commentId         BigInt           @id @default(autoincrement()) @map("comment_id")
  postId            BigInt           @map("post_id")
  userId            BigInt           @map("user_id")
  content           String           @db.Text
  createdAt         DateTime         @default(now()) @map("created_at")

  socialPost        SocialPost       @relation(fields: [postId], references: [postId])
  user              User             @relation(fields: [userId], references: [userId])

  @@map("post_comments")
}

model Challenge {
  challengeId       BigInt           @id @default(autoincrement()) @map("challenge_id")
  challengeName     String           @map("challenge_name") @db.VarChar(100)
  description       String           @db.Text
  challengeType     String           @map("challenge_type") @db.VarChar(50)
  startDate         DateTime         @map("start_date") @db.Date
  endDate           DateTime         @map("end_date") @db.Date
  targetValue       Decimal?         @map("target_value") @db.Decimal(10, 2)
  rewardPoints      Int              @map("reward_points")
  createdAt         DateTime         @default(now()) @map("created_at")

  participants      ChallengeParticipant[]

  @@map("challenges")
}

model ChallengeParticipant {
  participantId     BigInt           @id @default(autoincrement()) @map("participant_id")
  challengeId       BigInt           @map("challenge_id")
  userId            BigInt           @map("user_id")
  progress          Decimal          @default(0) @db.Decimal(10, 2)
  isCompleted       Boolean          @default(false) @map("is_completed")
  completedAt       DateTime?        @map("completed_at")
  rank              Int?
  joinedAt          DateTime         @default(now()) @map("joined_at")

  challenge         Challenge        @relation(fields: [challengeId], references: [challengeId])
  user              User             @relation(fields: [userId], references: [userId])

  @@unique([challengeId, userId])
  @@map("challenge_participants")
}

model Notification {
  notificationId    BigInt           @id @default(autoincrement()) @map("notification_id")
  userId            BigInt           @map("user_id")
  type              String           @db.VarChar(50)
  title             String           @db.VarChar(255)
  message           String           @db.Text
  isRead            Boolean          @default(false) @map("is_read")
  createdAt         DateTime         @default(now()) @map("created_at")

  user              User             @relation(fields: [userId], references: [userId])

  @@map("notifications")
}

model ProgressPhoto {
  photoId           BigInt           @id @default(autoincrement()) @map("photo_id")
  userId            BigInt           @map("user_id")
  photoUrl          String           @map("photo_url") @db.VarChar(500)
  takenDate         DateTime         @map("taken_date") @db.Date
  weight            Decimal?         @db.Decimal(5, 2)
  notes             String?          @db.Text
  createdAt         DateTime         @default(now()) @map("created_at")

  user              User             @relation(fields: [userId], references: [userId])

  @@map("progress_photos")
}

model BodyMeasurement {
  measurementId     BigInt           @id @default(autoincrement()) @map("measurement_id")
  userId            BigInt           @map("user_id")
  measurementDate   DateTime         @map("measurement_date") @db.Date
  weight            Decimal?         @db.Decimal(5, 2)
  bodyFatPercentage Decimal?         @map("body_fat_percentage") @db.Decimal(5, 2)
  muscleMass        Decimal?         @map("muscle_mass") @db.Decimal(5, 2)
  chest             Decimal?         @db.Decimal(5, 2)
  waist             Decimal?         @db.Decimal(5, 2)
  hips              Decimal?         @db.Decimal(5, 2)
  thigh             Decimal?         @db.Decimal(5, 2)
  bicep             Decimal?         @db.Decimal(5, 2)
  createdAt         DateTime         @default(now()) @map("created_at")

  user              User             @relation(fields: [userId], references: [userId])

  @@map("body_measurements")
}

model DietLog {
  dietLogId         BigInt           @id @default(autoincrement()) @map("diet_log_id")
  userId            BigInt           @map("user_id")
  logDate           DateTime         @map("log_date") @db.Date
  mealType          String           @map("meal_type") @db.VarChar(20)
  foodName          String           @map("food_name") @db.VarChar(200)
  calories          Int?
  protein           Decimal?         @db.Decimal(6, 2)
  carbs             Decimal?         @db.Decimal(6, 2)
  fat               Decimal?         @db.Decimal(6, 2)
  quantity          Decimal?         @db.Decimal(8, 2)
  unit              String?          @db.VarChar(50)
  createdAt         DateTime         @default(now()) @map("created_at")

  user              User             @relation(fields: [userId], references: [userId])

  @@map("diet_logs")
}
